{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/bronze1-2/","result":{"data":{"site":{"siteMetadata":{"title":"KunheeKim.Dev","author":"[Kunhee Kim]","siteUrl":"https://kunheekimkr.github.io","comment":{"disqusShortName":"","utterances":"kunheekimkr/kunheekimkr.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"55fa4be9-2948-5e48-a159-9a9f0fdfe94b","excerpt":"공부 자료 1. 개요 직사각형이 나오는 기하 문제는 가장 기초적인 형태의 기하 문제입니다. 직사각형은 모든 변이 서로 수직이기 때문에 좌표축과 격자점을 이용하여 나타내기 편리하기 때문입니다. 직사각형의 성질로 인해 왼쪽 하단 점의 좌표와 오른쪽 상단 점의 좌표만 주어지면 사각형이 특정된다는 점도 중요한 성질입니다. 2. 예제 Example-Fence Painting…","html":"<p><a href=\"https://usaco.guide/bronze/time-comp?lang=cpp\">공부 자료</a></p>\n<h2 id=\"1-개요\" style=\"position:relative;\"><a href=\"#1-%EA%B0%9C%EC%9A%94\" aria-label=\"1 개요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 개요</h2>\n<p>직사각형이 나오는 기하 문제는 가장 기초적인 형태의 기하 문제입니다. 직사각형은 모든 변이 서로 수직이기 때문에 좌표축과 격자점을 이용하여 나타내기 편리하기 때문입니다.</p>\n<p>직사각형의 성질로 인해 왼쪽 하단 점의 좌표와 오른쪽 상단 점의 좌표만 주어지면 사각형이 특정된다는 점도 중요한 성질입니다.</p>\n<h2 id=\"2-예제\" style=\"position:relative;\"><a href=\"#2-%EC%98%88%EC%A0%9C\" aria-label=\"2 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 예제</h2>\n<p><a href=\"http://www.usaco.org/index.php?page=viewproblem2&#x26;cpid=567\">Example-Fence Painting</a></p>\n<p><a href=\"https://www.acmicpc.net/problem/11970\">백준에서 채점 가능</a></p>\n<p>직사각형 문제에 들어가기 전, 수직선 위의 두 선분의 교차하는 길이를 찾는 간단한 문제입니다.</p>\n<p>풀이는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> c <span class=\"token operator\">>></span> d<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> b<span class=\"token operator\">-</span>a <span class=\"token operator\">+</span>d<span class=\"token operator\">-</span>c<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> intersection <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> total <span class=\"token operator\">-</span> intersection<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우선 두 선분의 길이를 구하여 더한 뒤, 거기서 겹치는 부분의 길이를 구해 빼주어 답을 구합니다.</p>\n<p>여기서 겹치는 부분의 길이를 구할 때, 두 선분의 끝점 중 작은 값에서 두 선분의 시작점 중 큰 값을 빼서 구하고, 이 값이 0보다 작을 경우에는 겹치는 부분이 없다고 놓는 방법을 사용합니다.</p>\n<p><a href=\"http://www.usaco.org/index.php?page=viewproblem2&#x26;cpid=759\">Example-Blocked Billboard</a></p>\n<p><a href=\"https://www.acmicpc.net/problem/15463\">백준에서 채점 가능</a></p>\n<p>앞의 문제를 응용하여, 이번에는 두 판의 겹치지 않는 부분의 넓이를 구하는 문제입니다.</p>\n<p>풀이는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//structure of a rectangle</span>\n<span class=\"token comment\">// (x1,y1) and (x2,y2) are the lower-left and upper-right coordinates</span>\n<span class=\"token comment\">// function area() returns the area of a rectangle</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x2<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//function that calculates the intersected part of two rectangles and returns the area of it</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">intersect</span> <span class=\"token punctuation\">(</span>Rect p<span class=\"token punctuation\">,</span> Rect q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> xoverlap<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> yoverlap<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> xoverlap<span class=\"token operator\">*</span>yoverlap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Rect board1<span class=\"token punctuation\">,</span> board2 <span class=\"token punctuation\">,</span>truck<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> board1<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">>></span> board1<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">>></span> board1<span class=\"token punctuation\">.</span>x2 <span class=\"token operator\">>></span> board1<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> board2<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">>></span> board2<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">>></span> board2<span class=\"token punctuation\">.</span>x2 <span class=\"token operator\">>></span> board2<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> truck<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">>></span> truck<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">>></span> truck<span class=\"token punctuation\">.</span>x2 <span class=\"token operator\">>></span> truck<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span>board1<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>board2<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span>board1<span class=\"token punctuation\">,</span> truck<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span>board2<span class=\"token punctuation\">,</span> truck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>구조체 <code class=\"language-text\">Rect</code>를 이용하여 사각형을 왼쪽 하단 꼭짓점과 오른쪽 상단 꼭짓점을 이용하여 정의하고, 함수 <code class=\"language-text\">area()</code> 를 통해 사각형의 넓이를 리턴하도록 합니다.</p>\n<p>위의 문제에서 선분의 겹치는 길이를 구한 것과 같은 방법으로 가로변과 세로변의 겹치는 길이를 구한 후, 이를 이용하여 겹치는 부분의 넓이를 구하여 전체 사각형의 넓이에서 빼주어 넓이를 구할 수 있습니다.</p>\n<h2 id=\"3-자주-쓰이는-테크닉\" style=\"position:relative;\"><a href=\"#3-%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-%ED%85%8C%ED%81%AC%EB%8B%89\" aria-label=\"3 자주 쓰이는 테크닉 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 자주 쓰이는 테크닉</h2>\n<ul>\n<li>변의 길이와 넓이</li>\n</ul>\n<p>변의 길이는 간단하게 두 좌표 중 큰 것에서 작은 것을 빼서 구할 수 있으며, 그렇게 구한 가로와 세로의 길이를 곱하여 넓이를 구할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">rect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a_x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a_y<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b_x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> width<span class=\"token operator\">=</span> b_x <span class=\"token operator\">-</span> a_x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> height<span class=\"token operator\">=</span>b_y <span class=\"token operator\">-</span> a_y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> area<span class=\"token operator\">=</span>width<span class=\"token operator\">*</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>겹치는 부분</li>\n</ul>\n<p>겹치는 부분은 두 선분의 끝점 중 작은 것에서, 두 선분의 시작점 중 큰 것을 빼서 구합니다. 이 값이 0보다 작다는 것은 겹치는 부분이 없다는 의미이므로 대신 0을 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a_start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a_end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b_start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>a_end<span class=\"token punctuation\">,</span>b_end<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a_start<span class=\"token punctuation\">,</span>b_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"4-연습문제\" style=\"position:relative;\"><a href=\"#4-%EC%97%B0%EC%8A%B5%EB%AC%B8%EC%A0%9C\" aria-label=\"4 연습문제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 연습문제</h2>\n<p><a href=\"http://www.usaco.org/index.php?page=viewproblem2&#x26;cpid=663\">Square Pasture</a></p>\n<p><a href=\"https://www.acmicpc.net/problem/14173\">백준에서 채점 가능</a></p>\n<p>주어진 두 직사각형을 모두 덮는 최소 정사각형의 넓이를 구하며 되는 간단한 문제입니다.</p>\n<p>풀이는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span>x2<span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">,</span>y2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> x1 <span class=\"token operator\">>></span> y1 <span class=\"token operator\">>></span> x2 <span class=\"token operator\">>></span> y2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">,</span>b1<span class=\"token punctuation\">,</span>b2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> a1 <span class=\"token operator\">>></span> b1 <span class=\"token operator\">>></span> a2 <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> min_x <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> max_x <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> min_y <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> max_y <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>y2<span class=\"token punctuation\">,</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> side<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max_x <span class=\"token operator\">-</span> min_x<span class=\"token punctuation\">,</span>max_y <span class=\"token operator\">-</span> min_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span> side<span class=\"token operator\">*</span>side<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>두 직사각형의 영역을 모두 포함시키는 폭과 높이를 계산한 뒤 더 큰 것을 한 변으로 하는 정사각형의 넓이를 구해주면 됩니다.</p>\n<p><a href=\"http://www.usaco.org/index.php?page=viewproblem2&#x26;cpid=783\">Blocked Billboard 2</a></p>\n<p><a href=\"https://www.acmicpc.net/problem/15592\">백준에서 채점 가능</a></p>\n<p>첫번쨰 판에서 두번째 판에 가리지 않는 부분을 덮을 수 있는 최소 직사각형의 크기를 구하는 문제입니다.</p>\n<p>풀이는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span>x2<span class=\"token punctuation\">,</span>y1<span class=\"token punctuation\">,</span>y2<span class=\"token punctuation\">;</span>\n    cin<span class=\"token operator\">>></span> x1 <span class=\"token operator\">>></span> y1 <span class=\"token operator\">>></span> x2 <span class=\"token operator\">>></span> y2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> x3<span class=\"token punctuation\">,</span>x4<span class=\"token punctuation\">,</span>y3<span class=\"token punctuation\">,</span>y4<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> x3 <span class=\"token operator\">>></span> y3 <span class=\"token operator\">>></span> x4 <span class=\"token operator\">>></span> y4<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//Case 1: the second board fully covers the first board</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x3 <span class=\"token operator\">&lt;=</span> x1 <span class=\"token operator\">&amp;&amp;</span> y3 <span class=\"token operator\">&lt;=</span> y1 <span class=\"token operator\">&amp;&amp;</span> x2 <span class=\"token operator\">&lt;=</span> x4 <span class=\"token operator\">&amp;&amp;</span> y2 <span class=\"token operator\">&lt;=</span> y4<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Case 2: the second board covers the bottom of the first board</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x3 <span class=\"token operator\">&lt;=</span> x1 <span class=\"token operator\">&amp;&amp;</span> x2 <span class=\"token operator\">&lt;=</span> x4 <span class=\"token operator\">&amp;&amp;</span> y3 <span class=\"token operator\">&lt;=</span> y1 <span class=\"token operator\">&amp;&amp;</span> y4 <span class=\"token operator\">&lt;=</span> y2<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>x2<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Case 3: the second board covers the top of the first board</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x3 <span class=\"token operator\">&lt;=</span> x1 <span class=\"token operator\">&amp;&amp;</span> y1 <span class=\"token operator\">&lt;=</span> y3 <span class=\"token operator\">&amp;&amp;</span> x2 <span class=\"token operator\">&lt;=</span> x4 <span class=\"token operator\">&amp;&amp;</span> y2 <span class=\"token operator\">&lt;=</span> y4<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>x2<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y3<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Case 4: the second board covers the left of the first board</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x3 <span class=\"token operator\">&lt;=</span> x1 <span class=\"token operator\">&amp;&amp;</span> y3 <span class=\"token operator\">&lt;=</span> y1 <span class=\"token operator\">&amp;&amp;</span> x4 <span class=\"token operator\">&lt;=</span> x2 <span class=\"token operator\">&amp;&amp;</span> y2 <span class=\"token operator\">&lt;=</span> y4<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>x2<span class=\"token operator\">-</span>x4<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Case 5: the second board covers the right of the first board</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">&lt;=</span> x3 <span class=\"token operator\">&amp;&amp;</span> y3 <span class=\"token operator\">&lt;=</span> y1 <span class=\"token operator\">&amp;&amp;</span> x2 <span class=\"token operator\">&lt;=</span> x4 <span class=\"token operator\">&amp;&amp;</span> y2 <span class=\"token operator\">&lt;=</span> y4<span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>x3<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//Case 6: Other cases(Covering the corner, no intersection)</span>\n    <span class=\"token keyword\">else</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>x2<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>첫번째 판과 두번쨰 판의 배치에 따라 6가지 경우로 나누어 주어 필요한 정사각형의 크기를 계산해 주면 됩니다.</p>\n<p><a href=\"https://codeforces.com/contest/1216/problem/C\">White Sheet</a></p>\n<p>흰 판에서 두 검은 판에 포함되지 않는 부분의 유무를 구하는 문제입니다.</p>\n<p>풀이는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Rect</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> x1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>x2<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">intersect</span> <span class=\"token punctuation\">(</span>Rect p<span class=\"token punctuation\">,</span> Rect q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> xoverlap<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> yoverlap<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> xoverlap<span class=\"token operator\">*</span>yoverlap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token function\">intersect_three</span> <span class=\"token punctuation\">(</span>Rect p<span class=\"token punctuation\">,</span> Rect q<span class=\"token punctuation\">,</span> Rect r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> xoverlap<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>x2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>x1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> yoverlap<span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">.</span>y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> xoverlap<span class=\"token operator\">*</span>yoverlap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Rect w<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> w<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">>></span> w<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">>></span> w<span class=\"token punctuation\">.</span>x2 <span class=\"token operator\">>></span> w<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">.</span>x2 <span class=\"token operator\">>></span> b1<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">.</span>x1 <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">.</span>y1 <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">.</span>x2 <span class=\"token operator\">>></span> b2<span class=\"token punctuation\">.</span>y2<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> visible<span class=\"token operator\">=</span>w<span class=\"token punctuation\">.</span><span class=\"token function\">area</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>b1<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token function\">intersect</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>b2<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">intersect_three</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>b1<span class=\"token punctuation\">,</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>visible <span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"YES\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NO\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>연습문제를 응용하여 세 직사각형에 모두 포함되는 영역을 구해줄 수 있습니다.</p>\n<p>흰 직사각형의 넓이 - 검은 직사각형으로 덮인 부분의 넓이 + 두 검은 직사각형에 모두 덮인 부분의 넓이 를 계산하여 그 값이 0보다 큰지를 통해 덮이지 않은 부분의 유무를 판별할 수 있습니다.</p>\n<p><a href=\"https://codeforces.com/problemset/problem/1555/B\">Two Tables</a></p>\n<p>두 책상이 모두 방 안에 배치될 수 있도록 첫 사각형을 밀어야 할 최소 거리를 구하는 문제입니다.</p>\n<p>풀이는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ios_base<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> max_w<span class=\"token punctuation\">,</span> max_h<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> max_w <span class=\"token operator\">>></span> max_h<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> x1 <span class=\"token operator\">>></span> y1 <span class=\"token operator\">>></span> x2 <span class=\"token operator\">>></span> y2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> width<span class=\"token operator\">=</span>x2<span class=\"token operator\">-</span>x1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> height<span class=\"token operator\">=</span>y2<span class=\"token operator\">-</span>y1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> w <span class=\"token operator\">>></span> h<span class=\"token punctuation\">;</span>\n\n\n        <span class=\"token keyword\">int</span> move_x<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> move_y<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">+</span>w <span class=\"token operator\">&lt;=</span> max_w<span class=\"token punctuation\">)</span>\n            move_x <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> w<span class=\"token operator\">-</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span>max_w<span class=\"token operator\">-</span>x2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>height <span class=\"token operator\">+</span> h <span class=\"token operator\">&lt;=</span> max_h<span class=\"token punctuation\">)</span>\n            move_y <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">-</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>y1<span class=\"token punctuation\">,</span>max_h<span class=\"token operator\">-</span>y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>move_x <span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> move_y <span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> move_y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>move_x <span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> move_y <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> move_x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>move_x <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> move_y <span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>move_x<span class=\"token punctuation\">,</span> move_y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>x와 y 방향으로 이동해야할 필요성과 이동해야 할 거리를 각각 구한 다음, 둘 중 최소로 이동하면 됩니다.</p>","frontmatter":{"title":"[Algorithm] Bronze 1-2. Rectangle Geometry","date":"November 22, 2021"}}},"pageContext":{"slug":"/Algorithm/bronze1-2/","previous":{"fields":{"slug":"/Algorithm/bronze1-1/"},"frontmatter":{"title":"[Algorithm] Bronze 1-1. 시간복잡도(Time Complexity)"}},"next":{"fields":{"slug":"/SEEDlabs/setUID/"},"frontmatter":{"title":"[SEED labs] Environment Variable and Set-UID Program Lab (1)"}}}},"staticQueryHashes":["2486386679","3128451518"]}